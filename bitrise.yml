format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BIN_NAME: releaseman
  - GITHUB_RELEASES_URL: https://github.com/bitrise-tools/${BIN_NAME}/releases

workflows:

  _install_test_tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -v

            # Install dependencies
            go get -u github.com/tools/godep

            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck

            # Go lint
            go get -u github.com/golang/lint/golint

  _test:
    steps:
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go test ./...
    - script:
        title: Go Vet
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go vet $GOLIST_WITHOUT_VENDOR
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"

  install:
    before_run:
    - _test
    steps:
    - script:
        title: Test & install
        inputs:
        - content: |-
            #!/bin/bash
            set -v
            set -e

            go install

  godeps-update:
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u github.com/tools/godep
            rm -rf ./Godeps
            rm -rf ./vendor
            go get -t -d ./...
            go get golang.org/x/sys/unix
            go get github.com/davecgh/go-spew/spew
            go get github.com/pmezard/go-difflib/difflib
            godep save ./...

  ci:
    before_run:
    - _install_test_tools
    - _test
    steps:
    - slack:
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BIN_NAME} - CI - OK
        - from_username_on_error: ${BIN_NAME} - CI - ERROR
        - emoji: ":white_check_mark:"
        - emoji_on_error: ":no_entry_sign:"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}


  create-bin:
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash

            set -e

            # Create bins
            rm -rf ./_bin/tmp-bins/

            export ARCH=x86_64
            export GOARCH=amd64

            export OS=Darwin
            export GOOS=darwin
            deploy_pth="./_bin/$BIN_NAME-$OS-$ARCH"
            go build -o "$deploy_pth"

            export OS=Linux
            export GOOS=linux
            deploy_pth="./_bin/$BIN_NAME-$OS-$ARCH"
            go build -o "$deploy_pth"


  create-release:
    before_run:
    - _test
    after_run:
    - create-bin
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash

            set -e

            # Draft new release
            export CI=true
            releaseman create \
              --get-version-script "go run _scripts/get_version.go -file version/version.go" \
              --bump-version patch \
              --set-version-script "bash _scripts/set_version.sh version/version.go"

  create-release-version:
    envs:
    - RELEASE_VERSION: 0.9.0
    before_run:
    - _test
    after_run:
    - create-bin
    steps:
    - script:
        title:
        inputs:
        - content: |
            #!/bin/bash

            set -e

            # Draft new release
            export CI=true
            releaseman create \
              --version $RELEASE_VERSION \
              --set-version-script "bash _scripts/set_version.sh version/version.go"
